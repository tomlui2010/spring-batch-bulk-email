# This property configures the strategy for Hibernate to automatically update the database schema based on the entity
# classes. In this case, it is set to "update", which means Hibernate will create missing tables and columns,
# and update existing ones if necessary.
spring.jpa.hibernate.ddl-auto=update

#This property is related to Spring Batch and configures the schema initialization behavior for the job repository.
# In this case, it is set to "ALWAYS", which means Spring Batch will always try to create or update the schema
# before running any jobs.
spring.batch.jdbc.initialize-schema = ALWAYS

#This property disables all Spring Batch jobs. It can be useful if you want to use a separate job scheduler instead
# of the one provided by Spring Batch.
spring.batch.job.enabled=false

# MySQL db server connection props.
spring.datasource.url=jdbc:mysql://localhost:3306/testdb
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# This property configures the naming strategy for Hibernate. In this case, it is using a physical naming strategy that
# matches the naming conventions of the underlying database.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# mail - SMTP server properties (used MailCatcher)
spring.mail.host=localhost
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.port=1025

#This property configures Hibernate to order SQL updates by primary key, which can improve performance.
spring.jpa.properties.hibernate.order_updates=true

#This property enables batched updates for versioned data in Hibernate. This can also improve performance.
spring.jpa.properties.hibernate.batch_versioned_data=true